🧩 What is Layout()?
    🧠 Definition:
            Layout() is a low-level composable in Jetpack Compose that gives you full control over how to measure and
            place child composables.

            Think of it as:
                "I want to control the layouting logic from scratch—Compose, don't interfere."

            • It's the building block behind high-level layout composables like Row, Column, Box, etc.
            • A very important feature of the Layout phase is the single pass measurement. This means that a layout
              element may not measure any of its children more than once. Single-pass measurement is good for performance, allowing Compose to efficiently handle deep UI trees.


    🔁 Lifecycle:
        • Composition: The Layout composable and its children are composed.
        • Measurement: measurePolicy.measure() is invoked with constraints and child measurables.
        • Placement: Each child is placed manually.

    LifeCycle Diagram:
        ./pictures/order_of_compose_phases.png

    🔧 MeasurePolicy Breakdown
            MeasurePolicy { measurables, constraints ->
                // 1. Measure children
                // 2. Determine own size
                // 3. Place children
                layout(width, height) {
                    // child.place(x, y)
                }
            }

            Terminology:
                • measurables: List of children to measure.
                • constraints: Min/max bounds that you must respect.
                • placeables: Result of measuring each child.
                • layout(): Defines size of this layout and logic for placing children.

    ✅ Example
                @Composable
                fun MyRow(
                    modifier: Modifier = Modifier,
                    content: @Composable () -> Unit
                ) {
                    Layout(
                        content = content,
                        modifier = modifier
                    ) { measurables, constraints ->

                        // Step 1: Measure all children with same constraints
                        val placeables = measurables.map { measurable ->
                            measurable.measure(constraints)
                        }

                        // Step 2: Calculate total width and max height
                        val width = placeables.sumOf { it.width }
                        val height = placeables.maxOfOrNull { it.height } ?: 0

                        // Step 3: Define size and place children
                        layout(width, height) {
                            var xOffset = 0
                            placeables.forEach { placeable ->
                                placeable.placeRelative(x = xOffset, y = 0)
                                xOffset += placeable.width
                            }
                        }
                    }
                }

           Usage: This arranges the children horizontally—just like a Row.

                MyRow {
                    Text("One")
                    Text("Two")
                    Text("Three")
                }

✅ 2. .layout {} — Modifier
        🔧 Purpose:
                Modify how a single child composable is measured and placed, via its modifier chain.

        📦 API Signature:
                fun Modifier.layout(
                    measure: (Measurable, Constraints) -> MeasureResult
                ): Modifier

        📌 When to Use:
                • You want to override layout behavior of a single composable.
                • You want to tweak its position (like shifting, scaling, changing size).
                • You want to adjust measurement or placement from the outside (not create a new container).

        🔁 Lifecycle:
                • Applied after composition, during layout phase.
                • Called when layout changes (size, constraints, etc.).
                • Doesn't affect composition.

        🧩 Example:
                Box(
                    modifier = Modifier
                        .background(Color.LightGray)
                        .size(200.dp)
                ) {
                    Box(
                        modifier = Modifier
                            .size(50.dp)
                            .background(Color.Red)
                            .layout { measurable, constraints ->
                                val placeable = measurable.measure(constraints)
                                layout(placeable.width, placeable.height) {
                                    // Custom placement: offset child by 30px on x and y
                                    placeable.place(30, 30)
                                }
                            }
                    )
                }

🚧 1. What is SubcomposeLayout?
       🧠 Definition:
                SubcomposeLayout is a powerful low-level composable that allows you to defer the composition of children
                until after you know certain constraints or sizes.

                ✅ Description:
                    • Special Composable that composes children on-demand during measurement.
                    • Children can depend on the size or layout result of others.

       🧪Analogy
                Think of SubcomposeLayout like a chef who doesn't prepare all dishes upfront. Instead, the chef waits to
                see what size of plate you give him (constraints), and then decides what and how much to cook
                (compose) based on it.

                Whereas in Layout(), the chef already has the full dish ready — you just cut and arrange it on the
                plate (measure/place only).

       🌀Lifecycle of SubcomposeLayout
            Here’s the simplified lifecycle:
                • Initial Composition — The SubcomposeLayout is composed in the UI tree.
                • Measurement begins.
                • During measurement, it calls subcompose(slotId) { content }, which triggers actual composition of child
                    content.
                • Each subcompose(...) returns Measurable list.
                • You measure those measurables with given constraints.
                • You place them using standard layout(width, height).

            LifeCycle Diagram:
                    ./pictures/order_of_sub_compose_phases.png

       🛠️Syntax & Example
                @Composable
                fun MySubcomposeLayout() {
                    SubcomposeLayout { constraints ->

                        val topMeasurables = subcompose("top") {
                            Text("I'm at the top")
                        }

                        val topPlaceables = topMeasurables.map { it.measure(constraints) }
                        val topHeight = topPlaceables.maxOf { it.height }

                        val bottomMeasurables = subcompose("bottom") {
                            Text("I'm below top")
                        }
                        val bottomPlaceables = bottomMeasurables.map { it.measure(constraints) }

                        val totalHeight = topHeight + bottomPlaceables.maxOf { it.height }

                        layout(constraints.maxWidth, totalHeight) {
                            var y = 0
                            topPlaceables.forEach {
                                it.placeRelative(0, y)
                                y += it.height
                            }

                            bottomPlaceables.forEach {
                                it.placeRelative(0, y)
                            }
                        }
                    }
                }
             Usage: This arranges the children vertically—just like a column.

       🧰Use Cases
            Use Case	                    Why SubcomposeLayout Helps
            🔀 Lazy Lists	                Items are composed only when they appear (e.g., LazyColumn uses this internally).
            📏 Dynamic Overlays	            Compose a tooltip based on size of an anchor.
            🧩 Dependent Composition	    Compose a child only after knowing another child’s size.
            ⚠️ Constraints-Dependent UI	    Child layout depends on runtime constraints.

       🧵Real-World Example
                Scenario: You want to show a tooltip only after measuring the size of a Button.
                ✅ With SubcomposeLayout, you can:
                        • First compose and measure the button.
                        • Then based on its size, compose a tooltip at a correct offset.

🆚 Comparison Table
    Feature	                    .layout {}(Modifier)	    Layout {}(Composable)	        SubcomposeLayou(Composable)
    Level	                    Modifier	                Composable	                    Composable
    Compose children manually	❌	                        ✅ (composed already)	        ✅ (composed during measure)
    Measure + Place control	    ✅	                        ✅	                            ✅
    Compose based on size	    ❌	                        ❌	                            ✅
    Reusability	                Modifier level	            Reusable layout logic	        Fully custom & powerful layout engine
    Use cases	                Simple offset, padding,     Row, Column, custom layout      LazyColumn, Tooltip, Carousel etc
                                custom drawing
    Children Composed During    Composition                 Composition                     Measurement phase (on-demand)


📌 What Are Intrinsics in Jetpack Compose?
            Intrinsics refer to the minimum or maximum size a Composable would like to be along an axis, without knowing
            the exact constraints yet. Think of it as asking:

                • 📏 “Hey child, how wide would you ideally want to be to show all your content?”
                • 📐 “And if I gave you this width, how tall would you need to be?”

        🧬 Lifecycle of Intrinsic Measurements
            Intrinsics in Layout Flow:
                • Parent wants to size itself based on children.
                • Parent calls intrinsic functions like minIntrinsicWidth or maxIntrinsicHeight on children.
                • Children do not get measured at this point; they only report their preferred dimensions.
                • Later, during actual measurement, measure() is called with concrete constraints.

            Important:
                • Intrinsic measurements do not cache.
                • They may trigger recomposition or recalculation.
                • They can be expensive, especially with complex Composables.

        🔢 Types of Intrinsics in Compose
            Each Composable has these four methods available for intrinsic size:

            Function Name	Description
                • minIntrinsicWidth(h)	Minimum width child wants for height h
                • maxIntrinsicWidth(h)	Maximum width child can use for height h
                • minIntrinsicHeight(w)	Minimum height child wants for width w
                • maxIntrinsicHeight(w)	Maximum height child can use for width w

        ⚠️ Performance Implications
                • Intrinsics can be costly, because they may trigger multiple measurements.
                • Jetpack Compose discourages overuse of IntrinsicSize.Min/Max, and they are not always supported in
                    LazyLayouts (like LazyColumn).
                • Prefer normal measurement (Modifier.fillMax..., .wrapContentSize(), etc.) unless precise alignment
                    is required.

        ✅ Real-world Example
            Problem:
                    You want to align multiple Text composables in different rows with the same minimum width.
            Example:
                    Row(Modifier.height(IntrinsicSize.Min)) {
                        Column(
                            Modifier
                                .weight(1f)
                                .fillMaxHeight()
                                .background(Color.Gray)
                        ) {
                            Text("Short")
                        }

                        Column(
                            Modifier
                                .weight(1f)
                                .fillMaxHeight()
                                .background(Color.LightGray)
                        ) {
                            Text("This is a really long line of text.")
                        }
                    }
            Usage:
                    🟡 The row uses IntrinsicSize.Min for height, so both columns are tall enough to fit their tallest
                    child.

⚔️ SubcomposeLayout vs Intrinsics
        🛠️At first glance, SubcomposeLayout and intrinsics might appear to solve similar problems: both are used when
        you want to measure one child based on another. But their philosophy, performance characteristics, and use cases
        differ significantly.

    🆚 Comparison Table
        Criteria	    Intrinsics	                                    SubcomposeLayout
        🔍 Goal	        Ask child for preferred                         Measure/render some content only after
                        size before measuring	                        knowing something else

        🧠 Idea	        “Tell me how big you want to be”	            “I’ll render content B only after measuring content A”

        📦 Used In	    Precise sizing/alignment (text, forms)	        Complex conditional/dynamic layouts (tab indicators,
                                                                        tooltips)
        🔄 Phase	    Happens before measurement phase	            Composable is deferred until first measure completes
        🚫 Limitation	Cannot access Composable’s content or           Can fully compose, measure, and layout content blocks
                        structure
        🐢 Performance	May be expensive: recomposes to compute size	Slightly better in some cases—composition is deferred,
                                                                        not repeated
        ✅ Best When	Layouts with known structure,                   Layouts with conditional or dependent Composables
                        needing alignment

🧠 Analogy
    Intrinsics:
            Like asking someone how much space they want, and arranging furniture based on that without seeing the
            furniture.
    SubcomposeLayout:
            Like seeing the actual furniture, measuring it in the room, and then deciding where to put another chair
            based on it.


References:
    https://www.youtube.com/watch?v=l6rAoph5UgI&t=471s&ab_channel=AndroidDevelopers