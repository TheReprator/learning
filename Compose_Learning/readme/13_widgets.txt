

        1)BoxWithConstraints: It is a powerful layout composable that extends the behavior of a regular Box. It not only
            positions children like a Box but also provides the layout constraints (maxWidth, maxHeight, minWidth,
            minHeight) inside the composition, giving you more control.

            üß© What is BoxWithConstraints?
                A composable that:
                    ‚óè Lays out children like a Box (single or stacked items).
                    ‚óè Exposes current constraints (max/min width/height) inside the composable scope.
                    ‚óè Lets you write conditional UI logic based on parent constraints.

            Example:
                BoxWithConstraints {
                    if (maxWidth < 600.dp) {
                        Column { ... } // For mobile view
                    } else {
                        Row { ... }    // For tablet view
                    }
                }

            üß† How it Works Internally
                ‚óè BoxWithConstraints uses SubcomposeLayout under the hood.
                ‚óè It measures the parent constraints and re-composes the child content with them.
                ‚óè That‚Äôs why you can use maxWidth, maxHeight in the composition scope, unlike Box.

            üí° BoxWithConstraints vs. Window Size Classes

                üî∏ Android's WindowSizeClass approach:
                        class MainActivity : ComponentActivity() {
                            override fun onCreate(savedInstanceState: Bundle?) {
                                super.onCreate(savedInstanceState)

                                val metrics = WindowMetricsCalculator.getOrCreate()
                                    .computeCurrentWindowMetrics(this)
                                val width = metrics.bounds.width()
                                val height = metrics.bounds.height()

                                // Determine size class and set layout accordingly
                            }
                        }

                üî∏ With BoxWithConstraints:
                        @Composable
                        fun ResponsiveLayout() {
                            BoxWithConstraints {
                                when {
                                    maxWidth < 600.dp -> SmallScreenLayout()
                                    maxWidth < 840.dp -> MediumScreenLayout()
                                    else -> LargeScreenLayout()
                                }
                            }
                        }

                üìåThe key differences:
                        ‚óè Composition vs. Activity Level: BoxWithConstraints works at the composition level, allowing for
                            more granular control within specific UI components.
                        ‚óè Dynamic Updates: BoxWithConstraints automatically updates when constraints change (like during
                            rotation), without requiring explicit listeners.
                        ‚óè Hierarchical Responsiveness: You can nest multiple BoxWithConstraints to create hierarchically
                            responsive layouts where each component adapts individually.

            üí° BoxWithConstraints vs. onSizeChanged Modifier

                üî∏ onSizeChanged approach:
                        @Composable
                        fun ResponsiveContent() {
                            var size by remember { mutableStateOf(IntSize.Zero) }

                            Box(
                                modifier = Modifier
                                    .fillMaxSize()
                                    .onSizeChanged { size = it }
                            ) {
                                // Use size.width and size.height to make layout decisions
                            }
                        }

                üìåThe key differences:
                        ‚óè Constraints vs. Actual Size: BoxWithConstraints gives you the constraints (min/max bounds) before
                            the layout is placed, while onSizeChanged gives you the actual size after layout.
                        ‚óè Proactive vs. Reactive: BoxWithConstraints allows proactive layout decisions, while onSizeChanged
                            is reactive (may cause layout flicker on initial composition).
                        ‚óè Recomposition Behavior: onSizeChanged triggers a recomposition after measuring, which can be less
                            efficient than using BoxWithConstraints.

            üß† When to Use What?
                Scenario	                                    Recommended Tool

                Build responsive component UI	                BoxWithConstraints
                Build responsive app layout	Window              Size Classes
                Animate/move element based on size	            onSizeChanged
                Build layout for tablet/foldable	            Window Size Classes
                Adjust layout if width < 300dp	                BoxWithConstraints
                Log or debug real-time composable size	        onSizeChanged

            References:
                https://medium.com/@ramadan123sayed/understanding-boxwithconstraints-in-jetpack-compose-principles-and-best-practices-895dcd3f9e35