Restart(Recompose): Means a fresh copy of composable(It was earlier there, but due to state or call site change,
                    it was compelled to draw itself again in node tree)

Compose: First occurrence of composable in Tree

Call side: The call site is the source code location in which a composable is called.
                                        The instance of a composable in Composition is identified by its call site. The
        Compose compiler considers each call site as distinct. Calling composables from multiple call sites will create
        multiple instances of the composable in Composition.

Tips to improve performance:
    1) Use key composable, to uniquely identify each element within a composable like below,
            @Composable
            fun MoviesScreenWithKey(movies: List<Movie>) {
                Column {
                    for (movie in movies) {
                        key(movie.id) { // Unique ID for this movie
                            MovieOverview(movie)
                        }
                    }
                }
            }

    2) Skipping
        a) A composable function is eligible for skipping unless:
            ‚Ä¢ The function has a non-Unit return type
            ‚Ä¢ The function is annotated with @NonRestartableComposable or @NonSkippableComposable
            ‚Ä¢ A required parameter is of a non-stable type
        b) Enable Strong skipping via build.gradle
        c) Stable Type, If a parameter is stable and unchanged, Compose skips recomposition for better performance.
            üß© What is a Stable Type?
            A stable type is a data type that:
                a.1) Has predictable behavior when checking for equality (== or .equals()).
                a.2) Does not change its internal state without notifying Compose.
                a.3) Helps Compose decide whether to recompose a Composable or skip it.

            ‚úÖ A Type is Stable If:
                ‚Ä¢ It is a primitive (e.g. Boolean, Int, Long, Float, Char).
                ‚Ä¢ It is a data class with only stable fields.
                ‚Ä¢ It uses Compose‚Äôs @Stable or @Immutable annotations.
                ‚Ä¢ It doesn‚Äôt override equals() or hashCode() in a way that breaks Compose's expectations.
                ‚Ä¢ All function types (lambdas)

             ‚úÖ Valid stable types:
                 ‚Ä¢ data class User(val name: String, val age: Int) // ‚úÖ Stable by default

                 ‚Ä¢ @Stable
                   class Counter {
                     var value: Int by mutableStateOf(0)
                   }

                 ‚Ä¢ @Immutable
                   data class UiState(val loading: Boolean, val data: String)

                 ‚Ä¢ class MyClassStable(val counter: Pair<Int, Int>)

             üõë Unstable Type Example

                ‚Ä¢ class MyClassUnstable(val counter: Pair<LocalDate, LocalDate>)
                        as LocalDate is not of primitive type

                ‚Ä¢ class MyClassUnstable(val counter: Pair<*, *>)
                        as pair data is generic and not of primitive type

                ‚Ä¢ class User { // ‚ùå Not a data class, no equals/hashCode
                    var name: String = ""
                    var age: Int = 0
                  }

                ‚Ä¢ data class MutableUser(var name: String, var age: Int) // ‚ùå Not stable because var fields can change silently


             üîß How to Make a Type Stable
                    ‚Ä¢ Use val instead of var whenever possible.
                    ‚Ä¢ Use @Immutable for data classes with only stable types.
                    ‚Ä¢ Use @Stable if you‚Äôre using mutable state inside a class.

                ‚úÖ @Immutable ‚Üí for read-only data (safe, deeply checked)
                ‚úÖ @Stable ‚Üí for mutable objects that use mutableStateOf internally and inform Compose of changes

        d) When all types passed as parameters to a composable are stable, the parameter values are compared for equality
           based on the composable position in the UI tree. Recomposition is skipped if all the values are unchanged since
           the previous call.

LifeCycle of composable:
        ./pictures/lifecycle.png