ðŸ§± What is a Modifier?
        â€¢ A Modifier in Jetpack Compose is a standard kotlin object that describes how a composable should be laid
          out, drawn, or behave. It doesnâ€™t draw or layout by itself â€” it tells the Compose system how to handle
          that composable.

        â€¢ Modifiers are immutable and chainable, meaning you can combine many behaviors together.

        â€¢ Order of modifiers matters
          The order of modifier functions is significant. Since each function makes changes to the Modifier returned
           by the previous function, the sequence affects the final result.

ðŸª„ Custom Modifiers
    You can create your own modifier using Modifier.drawBehind, Modifier.layout, etc.

    Example:
        fun Modifier.redDot(): Modifier = this.then(
            Modifier.drawBehind {
                drawCircle(Color.Red, radius = 5.dp.toPx(), center = Offset.Zero)
            }
        )
    Usage:
        Text("Status", modifier = Modifier.redDot())

ðŸ§© Modifiers Are Stateless
        Modifiers don't store state; they just describe how things should be handled. State (like click count or
        animation progress) is handled outside the modifier (via state variables or remember blocks).


ðŸ§  TL;DR(Too Long; Didn't Read): How modifier ordering works in compose
    âœ… For layout, modifiers are applied first-to-last (outside to inside).
    âœ… For drawing, modifiers are applied last-to-first (inside to outside).
    âœ… For gesture/input, it also follows last-to-first (inner-most gets the first chance).

    ðŸ”¹ Let's break it down:
    1. ðŸ§± Layout Pass (Outside to Inside â€“ First to Last)
            Example:
                    Modifier
                        .padding(10.dp)
                        .size(100.dp)

                    â€¢ padding() is applied first, meaning outside the layout
                    â€¢ Then size() is applied inside the padded area

             ðŸ§¾ That means:
                    â€¢ First modifier wraps the rest
                    â€¢ The child measures inside the constraints passed down by outer modifiers
                    â€¢ components like size , padding , offset, fillMaxSize , sizeIn , wrapContentSize , requiredSize, align,
                      weight, fillMaxWidth, width, Arrangement.Center, onSizeChanged etc are part of layout phase
                        â€¢ Animation Modifiers(animateContentSize, ) are also part of layout phase as properties like
                            size, position, and opacity,  are changed during this operation to make UIs more dynamic.

             So layout is applied first-to-last, or outer-to-inner.


    2. ðŸŽ¨ Drawing Pass (Inside to Outside â€“ Last to First)
            Example:
                    Modifier
                        .background(Color.Red)
                        .padding(16.dp)

                    â€¢ padding is applied first in layout (makes space)
                    â€¢ Then background() is drawn â€” but the drawing is applied last, so over everything else
             ðŸ§¾ That means:
                    â€¢ The last modifier in the chain draws first
                    â€¢ The earlier (outer) modifiers draw on top
                    â€¢ components like background, border, clip, graphicsLayer, shadow, drawBehind, drawWithCache etc are
                      part of drawing phase


            So drawing is applied last-to-first, or inner-to-outer


    3. ðŸ‘† Gesture/Input Pass (Inside to Outside â€“ Last to First)\
            Example:
                    Modifier
                        .clickable { println("Outer click") }
                        .padding(16.dp)
                        .clickable { println("Inner click") }

                    The last clickable (inner) will receive the click first. So:
                        "Inner click"
                    will print first.
             ðŸ§¾ That means:
                    â€¢ components like clickable, toggleable, draggable, scrollable, nestedScroll, pointerInput, focusable
                     etc are part of Gesture/Input phase

           So gesture handlers are also applied last-to-first.

ðŸ“ŒModifier ordering Examples:
        Example 1:
                Box(
                     Modifier
                          .border(1.dp, Color.Red)
                          .padding(10.dp)
                          .size(40.dp)
                          .background(Color.Green)
                )

            Output:
                ./pictures/modifier_output_1.webp
            StepInfo:
                ./pictures/modifier_order_sequence_1.webp

            Explanation(from step Info.):
                â€¢ Layout Phase: Represented with top arrows going from Left to Right
                â€¢ Drawing Phase: Represented with bottom arrows going from Right to Left

              â€¢ As mentioned before the modifiers which impact the size and placement of the UI element are applied from
                Left to Right which are mentioned in the diagram(./pictures/modifier_order_sequence_1.webp) with the top
                arrows going from Left to Right numbered 1, 2 and 3 as these modifiers impact the size and placement.

              â€¢ The bottom arrows 4 and 6 show modifiers which are applied during the Drawing phase so they are applied
                from Right to Left which are mentioned with the bottom arrows going from Right to Left .

              â€¢ Each top arrow in Layout phase which are labeled 1, 2 and 3 have constraints which are passed from Left
                to Right keeping the next modifier not to exceed the provided constraints coming from the previous modifier. On every step the constraints get updated due to modifiers and updated constraints are then passed to the next modifiers and so on.

        Example 2:
                Box(
                     Modifier
                          .padding(10.dp)
                          .border(1.dp, Color.Red)
                          .size(40.dp)
                          .background(Color.Green)
                )

            Output:
                ./pictures/modifier_output_2.webp
            StepInfo:
                ./pictures/modifier_order_sequence_2.webp

            Explanation(from step Info.):
                In the example we swapped padding modifier and border modifier so it impacted how modifiers are applied
                and eventually the outcome of the UI.

        Example 3:
                Box(
                  Modifier
                    .border(1.dp, Color.Red)
                    .size(40.dp)
                    .padding(10.dp)
                    .background(Color.Green)
                )

            StepInfo:
                ./pictures/modifier_order_sequence_3.webp

            Explanation(from step Info.):
                We can see the final size of the Box is finalised to 40dp and inner green box size is now reduced to 20dp
                due to 10dp padding applied on both sides after size modifier.

âœ… Final Summary
    Aspect	        Applied Order	    Meaning
    Layout	        First â†’ Last	    Outer â†’ Inner
    Drawing	        Last â†’ First	    Inner â†’ Outer (draw bottom-up)
    Gesture/Input	Last â†’ First	    Inner-first handling

âœ… References:
    https://proandroiddev.com/jetpack-compose-the-order-of-modifiers-does-matter-e9cd447fced5
    https://marcinmoskala.com/ModifierOrderGuesser/