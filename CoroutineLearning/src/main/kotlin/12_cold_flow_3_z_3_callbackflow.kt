package org.example

import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.channels.awaitClose
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.callbackFlow
import kotlinx.coroutines.flow.channelFlow
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking

/*
 üéØ What is callbackFlow?
    callbackFlow is used when you want to convert a callback-based API (like listeners, events, etc.) into a Flow.
    ‚úÖ It's like a bridge between traditional async callback world ‚û°Ô∏è suspending flow world.
    ‚úÖ Internally, callbackFlow is built on ChannelFlow ‚Äî so it allows multi-coroutine safe emissions too.

üìú Internally How callbackFlow Works
    It creates a Channel.
    It exposes trySend to push data into the channel.
    awaitClose {} is used to clean up.
    When you collect, it reads from the channel.

* */

fun interface Listener {
    fun onEvent(value: String)
}

private fun registerListener(scope: CoroutineScope, listener: Listener) {
    // Imagine it's calling back after 1 sec
    scope.launch {
        delay(1000)
        listener.onEvent("First Event after 1 second")
        delay(1000)
        listener.onEvent("Second Event after 2 seconds")
    }
}

private fun flowCallback(): Flow<String> = callbackFlow {
    val listener = Listener { value ->
        trySend(value) // send value into the flow
        if (value == "Second Event after 2 seconds") {
            close() // üëà Close the flow manually
        }
    }

    registerListener(this, listener)

    awaitClose {
        println("Flow closed")
        // Clean up if needed
    }
}

/*
 Output:
        First Event after 1 second
        Second Event after 2 seconds

 Here at line 44, i had used trySend as it is not suspending function else we have to use coroutine scope on whole function
 At line 46, We had manually closed the flow

 üß† Key Points about callbackFlow
    Feature	                Meaning
    Used for	            Turning callbacks/listeners into flows
    Emission Safety	        Multi-coroutine safe
    Needs awaitClose?	    ‚úÖ Yes (otherwise leak risk)
    Based on	            ChannelFlow internally
    Can use send/trySend	‚úÖ Yes

üì¶ Why do we need awaitClose inside callbackFlow?
    Because listeners are usually infinite (they keep calling back anytime).
    If the collector cancels / closes the flow, we must unregister the listener manually to prevent memory leaks.
    awaitClose {} is called when the flow is no longer collected

üß† Difference between flow, channelFlow, and callbackFlow
                                flow {}	                        channelFlow {}	                    callbackFlow {}
    Built for	                Simple suspending emission	    Concurrent coroutine emissions	    Callback-to-Flow conversion
    Single coroutine emission?	‚úÖ Yes	                        ‚ùå No (multi allowed)	            ‚ùå No (multi allowed)
    Multi coroutine emission?	‚ùå Crash	                    ‚úÖ Safe	                            ‚úÖ Safe
    Needs awaitClose?	        ‚ùå No	                        ‚ùå No	                            ‚úÖ Yes
    Heavyweight?	            ‚ùå No	                        ‚ö° A bit	                            ‚ö° A bit
    Example use	                for-loops, simple delays	    multiple parallel jobs	            API listeners, event bus, broadcast receivers


üéØ TL;DR:
Use callbackFlow when you need to turn callback/listener/event APIs into Kotlin Flows, safely and cleanly.
    ‚úÖ callbackFlow is built over channelFlow.
    ‚úÖ Always remember to awaitClose {} for cleanup.
    ‚úÖ Use trySend inside it, not emit.

üî• Bonus Mnemonic Trick to Remember
    Think	            Meaning
    flow {}	            ‚û°Ô∏è "I control the emission."
    channelFlow {}	    ‚û°Ô∏è "Many workers control emission."
    callbackFlow {}	    ‚û°Ô∏è "Outside world controls emission (via callbacks)."
* */
fun main(): Unit = runBlocking {
    flowCallback().collect { value ->
        println("Received: $value")
    }
}

